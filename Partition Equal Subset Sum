class Solution {
public:
    bool util(vector<int>& arr, int n, int x, vector<vector<int>> &dp) {
        if(x == 0) return true;
        if(x < 0 || n == 0) return false;
        if(dp[n][x] != -1) {
            return (dp[n][x] == 1);
        }
        bool flag = false;
        if(x-arr[n-1] >= 0) {
            flag |= util(arr, n-1, x-arr[n-1], dp);
        }
        if(flag == false) flag |= util(arr, n-1, x, dp);
        dp[n][x] = (flag) ? 1 : 0;
        return flag;
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int x: nums) sum += x;
        if(sum % 2 != 0) return false;
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int> (sum+1, -1));
        return util(nums, n, sum/2, dp);
    }
};
