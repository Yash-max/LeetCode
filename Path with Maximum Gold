class Solution {
public:
    int util(vector<vector<int>>& grid, int i, int j, int &r, int &c) {
        int ans = 0;
        if(i > 0 && grid[i-1][j] != 0) {
            int t = grid[i][j];
            grid[i][j] = 0;
            ans = max(ans, util(grid, i-1, j, r, c));
            grid[i][j] = t;
        }
        if(i < r-1 && grid[i+1][j] != 0) {
            int t = grid[i][j];
            grid[i][j] = 0;
            ans = max(ans, util(grid, i+1, j, r, c));
            grid[i][j] = t;
        }
        if(j > 0 && grid[i][j-1] != 0) {
            int t = grid[i][j];
            grid[i][j] = 0;
            ans = max(ans, util(grid, i, j-1, r, c));
            grid[i][j] = t;
        }
        if(j < c-1 && grid[i][j+1] != 0) {
            int t = grid[i][j];
            grid[i][j] = 0;
            ans = max(ans, util(grid, i, j+1, r, c));
            grid[i][j] = t;
        }
        return ans + grid[i][j];
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int ans = 0, r = grid.size(), c = grid[0].size();
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                if(grid[i][j] != 0) {
                    ans = max(ans, util(grid, i, j, r, c));
                }
            }
        }
        return ans;
    }
};
