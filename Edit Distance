class Solution {
public:
    int util(string &word1, string &word2, int n, int m, vector<vector<int>> &dp) {
        if(n == 0) return m;
        if(m == 0) return n;
        if(dp[n][m] != -1) return dp[n][m];
        int ans = 1001;
        if(word1[n-1] == word2[m-1]) {
            ans = min(ans, util(word1, word2, n-1, m-1, dp));
        }
        if(dp[n][m-1] == -1) ans = min(ans, 1 + util(word1, word2, n, m-1, dp));
        else ans = min(ans, 1 + dp[n][m-1]);
        if(dp[n-1][m] == -1) ans = min(ans, 1 + util(word1, word2, n-1, m, dp));
        else ans = min(ans, 1 + dp[n-1][m]);
        if(dp[n-1][m-1] == -1) ans = min(ans, 1 + util(word1, word2, n-1, m-1, dp));
        else ans = min(ans, 1 + dp[n-1][m-1]);
        return dp[n][m] = ans;
    }
    int minDistance(string word1, string word2) {
        int n = word1.length();
        int m = word2.length();
        vector<vector<int>> dp(n+1, vector<int> (m+1, -1));
        return util(word1, word2, n, m, dp);
    }
};
