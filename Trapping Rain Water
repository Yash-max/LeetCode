class Solution {
public:
    int trap(vector<int>& heights) {
        int len = heights.size();
        if(len <= 2) return 0;
        int ans = 0;
        vector<int> left(len);
        vector<int> right(len);
        for(int i = 0; i < len; i++) {
            if(i == 0) left[0] = heights[0]; 
            else left[i] = max(left[i-1], heights[i]);
            if((len-1-i) == len-1) right[(len-1-i)] = heights[(len-1-i)];
            else right[(len-1-i)] = max(right[(len-1-i)+1], heights[(len-1-i)]);
        }
        /*
        for(int x: left) {
            cout << x << " ";
        } cout << endl;
        
        for(int x: right) {
            cout << x << " ";
        } cout << endl;
        */
        for(int i = 0; i < len; i++) {
            if(min(left[i], right[i]) > heights[i]) ans += min(left[i], right[i]) - heights[i];
        }
        return ans;
    }
};
