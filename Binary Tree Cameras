/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int util(TreeNode* root, int &ans) {
        if(!root) return 0;
        if(!root->left && !root->right) return 1;
        int left = util(root->left, ans);
        int right = util(root->right, ans);
        if(left == 1 || right == 1) {
            ans++;
            return 2;
        } else if(left == 2 || right == 2) {
            return 0;
        }
        return 1;
    }
    int minCameraCover(TreeNode* root) {
        if(!root->left && !root->right) return 1; 
        int ans = 0;
        int left = util(root->left, ans);
        int right = util(root->right, ans);
        if((left == 1 || right == 1) || (left != 2 && right != 2)) ans++;
        
        return ans;
    }
};
