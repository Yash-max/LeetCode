class Solution {
public:
    int util(TreeNode* root, unordered_map<int, int> &mp) {
        if(!root) return 0;
        int ans = 0;
        ans += root->val;
        ans += util(root->left, mp);
        ans += util(root->right, mp);
        mp[ans]++;
        return ans;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> v;
        unordered_map<int, int> mp;
        util(root, mp);
        priority_queue<pair<int, int>> pq;
        for(auto itr: mp) {
            pq.push({itr.second, itr.first});
        }
        int t = pq.top().first;
        while(!pq.empty()) {
            pair<int, int> p = pq.top();
            pq.pop();
            if(p.first != t) break;
            v.push_back(p.second);
        }
        return v;
    }
};
