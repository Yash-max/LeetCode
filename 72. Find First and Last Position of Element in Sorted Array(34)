class Solution {
public:
    void binary(vector<int>& v,vector<int>& nums,int &target,int l,int r){
        if(l <= r){
            int mid = l + (r-l)/2;
            if(nums[mid] > target){
                binary(v,nums,target,l,mid-1);
            }else if(nums[mid] < target){
                binary(v,nums,target,mid+1,r);
            }else{
                if(v[0] == -1){v[0]=mid;}
                v[0]=min(v[0],mid);
                v[1]=max(v[1],mid);
                if(mid > l && nums[mid-1] == target){
                    binary(v,nums,target,l,mid-1);
                }
                if(mid < r && nums[mid+1] == target){
                    binary(v,nums,target,mid+1,r);
                }
            }
        }
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        if(n == 0)    return {-1,-1};
        if(n == 1){
            if(nums[0] == target){
                return {0,0};
            }else{
                return {-1,-1};
            }
        }
        vector<int> v(2,-1);
        binary(v,nums,target,0,n-1);
        return v;
    }
};
