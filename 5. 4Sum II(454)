class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        int n = A.size();
        if(n == 0){
            return 0;
        }
        unordered_map<int,int> m;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                m[C[i]+D[j]]++;
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int sum = A[i]+B[j];
                auto itr = m.find(-sum);
                if(itr != m.end()){count+=itr->second;}
            }
            // unordered_map is way faster than map
            // find is also faster than m[sth]
            // Even faster implement one on our own!~!
        }
        return count;
    }
};

class Hash {
public:
    int n = 360007;
    int key[360007]={0}, value[360007]={0};
    int& operator [](int num){
        int idx = (num % n + n) % n, cnt = 1;
        while(key[idx] != num && value[idx] != 0){
            idx = (idx + (cnt * cnt)) % n;
            cnt += 1;
        }
        key[idx] = num;
        return value[idx];
    }
};
class Solution {
public:
    int fourSumCount(vector<int>& a, vector<int>& b, vector<int>& c, vector<int>& d) {
        int ans = 0;
        int n1 = a.size();
        int n2 = b.size();
        int n3 = c.size();
        int n4 = d.size();
        // map<int,int> m;
        Hash m;
        for(int i=0;i<n3;i++){
            for(int j=0;j<n4;j++){
                m[c[i]+d[j]]++;
            }
        }
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                int sum = (a[i]+b[j]);
                if(m[-sum] > 0){
                    ans += m[-sum];
                }
            }
        }
        return ans;
    }
};
